{"name":"Bracket-rename","tagline":"Rename refactoring for bracket","body":"### Refactoring Tools for JavaScript\r\nA splendid programmer such as yourself obviously never makes mistakes and never regrets past decisions. No? Oh, well. Wouldn't it be nice if you could go back in time and fix your mistakes, though?\r\n\r\nWith the proper refactoring tools, you can.\r\n\r\nOne particularly common mistake is to choose a bad name for a variable or property.\r\n\r\n### Renaming JavaScript Identifiers\r\nLocal variables are easy to rename automatically, and many editors support this. But property names are more tricky. Consider the following code:\r\n\r\n```javascript\r\nfunction StringBuilder() {\r\n    this.array = []\r\n}\r\nStringBuilder.prototype.append = function(x) {\r\n    this.array.push(x)\r\n}\r\nStringBuilder.prototype.clear = function() {\r\n    this.array.length = 0\r\n}\r\nStringBuilder.prototype.toString = function() {\r\n    return this.array.join('')\r\n}\r\n\r\nfunction BinaryHeap() {\r\n    this.array = []\r\n}\r\nBinaryHeap.prototype.insert = function(key,value) {\r\n    var i = this.array.length;\r\n    while (i > 0 && this.array[(i-1)/2].key > key) {\r\n        this.array[i] = this.array[(i-1)/2]\r\n        i = (i-1)/2\r\n    }\r\n    this.array[i] = {key:key, value:value}\r\n}\r\n/* ... */\r\n```\r\n\r\nNow suppose you want to rename the `array` property of your `StringBuilder` to something else. How does your favourite editor help you do this?\r\n\r\n#### The Bulldozer Approach\r\nReplace *all* occurrences of the `array` property name.\r\n\r\nUnfortunately, this forces you to rename `array` in `BinaryHeap` as well.\r\n\r\n#### The Old-School Approach\r\nUse find/replace tools and decide manually for every occurrence of `array` if it should be replaced. \r\n\r\nUnfortunately, this takes away your precious programming time.\r\n\r\n#### Semi-Automatic Renaming\r\nThe bracket-rename extension walks a middle ground between the old-school and the bulldozer. It uses a static analyzer to figure out which tokens obviously refer to the same property. It still requires some feedback from the programmer like the old-school approach, but it answers the obvious questions for you.\r\n\r\nIn the example above, bracket-rename will figure out that the four `array` tokens in the `StringBuilder` class are related, and those in the `BinaryHeap` class are related. Thus, you only have to tell it once that the array tokens in `BinaryHeap` should not be renamed.\r\n\r\n### How Do I Try It?\r\nInstall [Brackets](http://brackets.io) and then use the extension manager to install it using the [GitHub URL](https://github.com/asgerf/bracket-rename).\r\n\r\n### Research\r\nMaking refactoring tools for JavaScript is part of my Ph.D research in the [Programming Languages Group](http://cs.au.dk/research/research-areas/programming-languages/) at Aarhus University. We are currently exploring others types of refactorings, and ways to make the static analyzer smarter.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}